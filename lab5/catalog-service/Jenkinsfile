

pipeline {
  agent  { label 'master' }

   parameters {
          // these will be presented as build parameters
            choice(name: 'catalog_service_version', choices: ['1'], description: '1 = Normal behavior')
            choice(name: 'anomaly_rule', choices: ['20','50','80'], description:'20= response time above 20ms. 50 =response time above 50ms. 80= response time above 80ms')
      }
  environment {

    APP_NAME = "catalog"
    // file locations
    DOCKER_COMPOSE_TEMPLATE_FILE = "$WORKSPACE/lab5/catalog-service/docker-compose.template"
    DOCKER_COMPOSE_FILE = "$WORKSPACE/lab5/catalog-service/docker-compose.yaml"
    DOCKER_COMPOSE_LG_TEMPLATE_FILE = "$WORKSPACE/lab5/infrastructure/neoLoad/lg/docker-compose.template"
    DOCKER_COMPOSE_LG_FILE = "$WORKSPACE/lab5/catalog-service/docker-compose-neoload.yml"

    WAIT_TILL_READY_FILE = "$WORKSPACE/helper-scripts/wait-till-ready.sh"
    DT_URL = "https://${env.DT_ACCOUNTID}"


    DYNATRACEID="${env.DT_ACCOUNTID}"
    DYNATRACEAPIKEY="${env.DT_API_TOKEN}"
    NLAPIKEY="${env.NL_WEB_API_KEY}"
    NL_DT_TAG="service:${env.APP_NAME}"
    NEOLOAD_ASCODEFILE="$WORKSPACE/lab5/catalog-service/tests/neoload/load_template/catalogue_neoload.yaml"
    NEOLOAD_ASCODESLAFILE="$WORKSPACE/lab5/catalog-service/tests/neoload/load_template/catalog_neoload_sla.yaml"
    NEOLOAD_ANOMALIEDETECTIONFILE="catalogue_anomalieDection.json"
      // build the docker image name using tag value passed as parameters
    catalogserviceimage = "dtdemos/keptn-orders-catalog-service:${params.catalog_service_version}"

  }
  stages {
      stage('create docker netwrok') {

                     steps {
                          sh "docker network create ${APP_NAME} || true"

                     }
      }
      stage('configure-docker-compose-file') {
                  steps {
                      script {
                          echo "============================================="
                          echo "Deployment configuration"
                          echo "catalogserviceimage    : ${env.catalogserviceimage}"
                          echo "Docker Network : ${APP_NAME}"
                          echo "============================================="

                          // update the docker-compse file with the new image names
                          sh "cp -f ${DOCKER_COMPOSE_TEMPLATE_FILE} ${DOCKER_COMPOSE_FILE}"
                          sh "sed -i 's#REPLACE-CATALOG-IMAGE#${env.catalogserviceimage}#g' ${DOCKER_COMPOSE_FILE}"
                          sh "sed -i 's#TO_REPLACE#${APP_NAME}#g' ${DOCKER_COMPOSE_FILE}"
                          sh "cat ${DOCKER_COMPOSE_FILE}"
                      }
                  }
      }

      stage('docker-down') {
                steps {
        	        step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StopAllServices'], useCustomDockerComposeFile: true])
                }
      }

      stage('docker-compose-up') {
        steps {
            step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StartAllServices'], useCustomDockerComposeFile: true])
        }
       }

      stage('wait-till-ready') {
            steps {

                    sh 'chmod +x ${WAIT_TILL_READY_FILE}'
                    sh '${WAIT_TILL_READY_FILE}  catalog'
                    }
      }

       stage('Push Dynatrace Deployment Event') {
            steps {
                script {
                    DYNATRACE_API_URL="${DT_URL}/api/v1/events"
                    DEPLOY_VERSION = "${APP_NAME}:${params.catalog_service_version}"

                    POST_DATA="""{
                        "eventType": "CUSTOM_DEPLOYMENT",
                        "attachRules": {
                                "tagRule": [
                                    {
                                        "meTypes":"SERVICE",
                                        "tags": [
                                            {
                                                "context": "CONTEXTLESS",
                                                "key": "service",
                                                "value": "catalog"
                                            }
                                        ]
                                    }
                                ]
                        },
                        "deploymentName" : "Deployment for ${APP_NAME}- ${env.BUILD_TAG}",
                        "deploymentVersion" : "${DEPLOY_VERSION}",
                        "deploymentProject" : "${APP_NAME}",
                        "source" : "Jenkins",
                        "ciBackLink" : "${env.JENKINS_URL}",
                        "customProperties" : {
                            "JenkinsUrl" : "${env.JOB_URL}",
                            "BuildUrl" : "${env.BUILD_URL}",
                            "GitCommit" : "${env.GIT_COMMIT}"
                        }
                    }"""

                    echo "${POST_DATA}"
                    echo "${DYNATRACE_API_URL}"

                    sh "curl -X POST ${DYNATRACE_API_URL} -H 'Content-type: application/json' -H 'Authorization: Api-Token ${DYNATRACEAPIKEY}' -d '${POST_DATA}'"
                }
            }
       }

      stage('Start NeoLoad infrastructure') {

          steps {
                              sh "cp -f ${DOCKER_COMPOSE_LG_TEMPLATE_FILE} ${DOCKER_COMPOSE_LG_FILE}"
                              sh "sed -i 's,TO_REPLACE,${APP_NAME},'  ${DOCKER_COMPOSE_LG_FILE}"
                              sh "sed -i 's,TOKEN_TOBE_REPLACE,$NLAPIKEY,'  ${DOCKER_COMPOSE_LG_FILE}"
                              sh 'docker-compose -f ${DOCKER_COMPOSE_LG_FILE} up -d'
                              sleep 15
              }

      }
    stage('Run load testing check in dev') {


      steps {

         sh "sed -i 's/RULE_TO_REPLACE/${params.anomaly_rule}/'  $WORKSPACE/lab5/catalog-service/tests/neoload/load_template/custom-resources/catalogue_anomalieDection.json"

         sh "sed -i 's/HOST_TO_REPLACE/${env.APP_NAME}/'  ${NEOLOAD_ASCODEFILE}"
         sh "sed -i 's/PORT_TO_REPLACE/8080/'  ${NEOLOAD_ASCODEFILE}"
         sh "sed -i 's|DTID_TO_REPLACE|${DYNATRACEID}|'  ${NEOLOAD_ASCODEFILE}"
         sh "sed -i 's/APIKEY_TO_REPLACE/${DYNATRACEAPIKEY}/'  ${NEOLOAD_ASCODEFILE}"
         sh "sed -i 's/JSONFILE_TO_REPLACE/${NEOLOAD_ANOMALIEDETECTIONFILE}/'   ${NEOLOAD_ASCODEFILE}"
         sh "sed -i 's/TAGS_TO_REPLACE/${NL_DT_TAG}/'  ${NEOLOAD_ASCODEFILE}"
         sh "mkdir $WORKSPACE/lab5/catalog-service/tests/neoload/neoload_project"
         sh "cd $WORKSPACE/lab5/catalog-service/tests/neoload/load_template/ ; zip -r $WORKSPACE/lab5/catalog-service/tests/neoload/neoload_project/neoloadproject.zip ./*"

         sh "docker run --rm \
                  -v $WORKSPACE/lab5/catalog-service/tests/neoload/neoload_project/:/neoload-project \
                  -e NEOLOADWEB_TOKEN=$NLAPIKEY \
                  -e TEST_RESULT_NAME=FuncCheck_catalogue_${BUILD_NUMBER} \
                  -e SCENARIO_NAME=CatalogueLoad \
                  -e CONTROLLER_ZONE_ID=defaultzone \
                  -e AS_CODE_FILES=catalogue_neoload.yaml \
                  -e LG_ZONE_IDS=defaultzone:1 \
                  --network ${APP_NAME} \
                neotys/neoload-web-test-launcher:latest"




      }

    }


  }
  post {
        always {
                sh 'docker-compose -f ${DOCKER_COMPOSE_LG_FILE} down'
                sh 'docker-compose -f ${DOCKER_COMPOSE_FILE} down'
                sh "docker network rm ${APP_NAME} || true"

                cleanWs()
                sh 'docker volume prune'
        }

      }
}
