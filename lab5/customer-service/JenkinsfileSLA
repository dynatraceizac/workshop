

pipeline {
  agent  { label 'master' }

       parameters {
              // these will be presented as build parameters
              choice(name: 'customer_service_version', choices: ['1','2'], description: '1 = Normal behavior. 2 = High Response time for /list.html')
               choice(name: 'anomaly_rule', choices: ['20','50','80'], description:'20= response time above 20ms. 50 =response time above 50ms. 80= response time above 80ms')
               choice(name: 'sLA_rule', choices: ['50','100','150'], description:'50= response time between 50 and 100ms. 100 =response time between 100 and 150 ms. 150= response time between 150 and 200ms')

          }
  environment {

    APP_NAME = "customer"
    DT_URL = "https://${env.DT_ACCOUNTID}"

    // file locations
    DOCKER_COMPOSE_TEMPLATE_FILE = "$WORKSPACE/lab5/customer-service/docker-compose.template"
    DOCKER_COMPOSE_LG_TEMPLATE_FILE = "$WORKSPACE/lab5/infrastructure/neoLoad/lg/docker-compose.template"
    DOCKER_COMPOSE_LG_FILE = "$WORKSPACE/lab5/customer-service/docker-compose-neoload.yml"
    DOCKER_COMPOSE_FILE = "$WORKSPACE/lab5/customer-service/docker-compose.yaml"
    WAIT_TILL_READY_FILE = "$WORKSPACE/helper-scripts/wait-till-ready.sh"

    DYNATRACEID="${env.DT_ACCOUNTID}"
    DYNATRACEAPIKEY="${env.DT_API_TOKEN}"
    NLAPIKEY="${env.NL_WEB_API_KEY}"
    NL_DT_TAG="service:${env.APP_NAME}"
    NEOLOAD_ASCODEFILE="$WORKSPACE/lab5/customer-service/tests/neoload/load_template/customer_neoload.yaml"
    NEOLOAD_ANOMALIEDETECTIONFILE="customer_anomalieDection.json"
    NEOLOAD_ASCODESLAFILE="$WORKSPACE/lab5/customer-service/tests/neoload/customer_neoload_sla.yaml"

    customerserviceimage = "dtdemos/keptn-orders-customer-service:${params.customer_service_version}"
    slasettings="${params.sLA_rule}"
     min="${slasettings}"

  }
  stages {
        stage('create docker netwrok') {

                           steps {
                                sh "docker network create ${APP_NAME} || true"

                           }
            }
            stage('configure-docker-compose-file') {
                        steps {
                            script {
                                echo "============================================="
                                echo "Deployment configuration"
                                echo "customerserviceimage    : ${env.customerserviceimage}"
                                echo "Docker Network : ${APP_NAME}"
                                echo "============================================="

                                // update the docker-compse file with the new image names
                                sh "cp -f ${DOCKER_COMPOSE_TEMPLATE_FILE} ${DOCKER_COMPOSE_FILE}"
                                sh "sed -i 's#REPLACE-CUSTOMER-IMAGE#${env.customerserviceimage}#g' ${DOCKER_COMPOSE_FILE}"
                                sh "sed -i 's#TO_REPLACE#${APP_NAME}#g' ${DOCKER_COMPOSE_FILE}"
                                sh "cat ${DOCKER_COMPOSE_FILE}"
                            }
                        }
            }

            stage('docker-down') {
                      steps {
              	        step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StopAllServices'], useCustomDockerComposeFile: true])
                      }
            }

            stage('docker-compose-up') {
              steps {
                  step([$class: 'DockerComposeBuilder', dockerComposeFile: "${DOCKER_COMPOSE_FILE}", option: [$class: 'StartAllServices'], useCustomDockerComposeFile: true])
              }
             }

            stage('wait-till-ready') {
                  steps {
                        sh 'chmod +x ${WAIT_TILL_READY_FILE}'
                        sh "${WAIT_TILL_READY_FILE} customer"
                  }
            }

             stage('Push Dynatrace Deployment Event') {
                  steps {
                      script {
                          DYNATRACE_API_URL="${DT_URL}/api/v1/events"
                          DEPLOY_VERSION = "${APP_NAME}:${params.catalog_service_version}"

                          POST_DATA="""{
                              "eventType": "CUSTOM_DEPLOYMENT",
                              "attachRules": {
                                      "tagRule": [
                                          {
                                              "meTypes":"SERVICE",
                                              "tags": [
                                                  {
                                                      "context": "CONTEXTLESS",
                                                      "key": "service",
                                                      "value": "customer"
                                                  }
                                              ]
                                          }
                                      ]
                              },
                              "deploymentName" : "Deployment for ${APP_NAME} - ${env.BUILD_TAG}",
                              "deploymentVersion" : "${DEPLOY_VERSION}",
                              "deploymentProject" : "${APP_NAME}",
                              "source" : "Jenkins",
                              "ciBackLink" : "${env.JENKINS_URL}",
                              "customProperties" : {
                                  "JenkinsUrl" : "${env.JOB_URL}",
                                  "BuildUrl" : "${env.BUILD_URL}",
                                  "GitCommit" : "${env.GIT_COMMIT}"
                              }
                          }"""

                          echo "${POST_DATA}"
                          echo "${DYNATRACE_API_URL}"

                          sh "curl -X POST ${DYNATRACE_API_URL} -H 'Content-type: application/json' -H 'Authorization: Api-Token ${DYNATRACEAPIKEY}' -d '${POST_DATA}'"
                      }
                  }
             }

            stage('Start NeoLoad infrastructure') {

                steps {
                    sh "cp -f ${DOCKER_COMPOSE_LG_TEMPLATE_FILE} ${DOCKER_COMPOSE_LG_FILE}"
                    sh "sed -i 's,TO_REPLACE,${APP_NAME},'  ${DOCKER_COMPOSE_LG_FILE}"
                    sh "sed -i 's,TOKEN_TOBE_REPLACE,$NLAPIKEY,'  ${DOCKER_COMPOSE_LG_FILE}"
                    sh 'docker-compose -f ${DOCKER_COMPOSE_LG_FILE} up -d'
                    sleep 15

                }

            }
          stage('Run functional check in dev') {

            steps {


            script {


              switch(slasettings) {
                case "50":
                    max="100"
                break

                case "100":
                    max="150"
                break

                case "150":
                    max="200"
                break
              }

            }
         sh "sed -i 's/RULE_TO_REPLACE/${params.anomaly_rule}/'  $WORKSPACE/lab5/customer-service/tests/neoload/load_template/custom-resources/customer_anomalieDection.json"

         sh "sed -i 's/MIN_TO_REPLACE/${min}/'  $WORKSPACE/lab5/customer-service/tests/neoload/customer_neoload_sla.yaml"
         sh "sed -i 's/MAX_TO_REPLACE/${max}/'  $WORKSPACE/lab5/customer-service/tests/neoload/customer_neoload_sla.yaml"

               sh "sed -i 's/HOST_TO_REPLACE/${env.APP_NAME}/' ${NEOLOAD_ASCODEFILE}"
               sh "sed -i 's/PORT_TO_REPLACE/8080/' ${NEOLOAD_ASCODEFILE}"
               sh "sed -i 's|DTID_TO_REPLACE|${DYNATRACEID}|' ${NEOLOAD_ASCODEFILE}"
               sh "sed -i 's/APIKEY_TO_REPLACE/${DYNATRACEAPIKEY}/'  ${NEOLOAD_ASCODEFILE}"
               sh "sed -i 's,JSONFILE_TO_REPLACE,${NEOLOAD_ANOMALIEDETECTIONFILE},'  ${NEOLOAD_ASCODEFILE}"
               sh "sed -i 's/TAGS_TO_REPLACE/${NL_DT_TAG}/' ${NEOLOAD_ASCODEFILE}"
               sh "cp ${NEOLOAD_ASCODESLAFILE}  $WORKSPACE/lab5/customer-service/tests/neoload/load_template/"
               sh "mkdir $WORKSPACE/lab5/customer-service/tests/neoload/neoload_project"
               sh "cd $WORKSPACE/lab5/customer-service/tests/neoload/load_template/ ; zip -r $WORKSPACE/lab5/customer-service/tests/neoload/neoload_project/neoloadproject.zip ./*"


                sh "docker run --rm \
                                  -v $WORKSPACE/lab5/customer-service/tests/neoload/neoload_project/:/neoload-project \
                                  -e NEOLOADWEB_TOKEN=$NLAPIKEY \
                                  -e TEST_RESULT_NAME=FuncCheck_customer_${BUILD_NUMBER} \
                                  -e SCENARIO_NAME=CustomerLoadSLA \
                                  -e CONTROLLER_ZONE_ID=defaultzone \
                                  -e AS_CODE_FILES=customer_neoload.yaml,customer_neoload_sla.yaml \
                                  -e LG_ZONE_IDS=defaultzone:1 \
                                  --network ${APP_NAME} \
                                   neotys/neoload-web-test-launcher:latest"

            }
          }


        }
        post {
              always {
                      sh 'docker-compose -f ${DOCKER_COMPOSE_LG_FILE} down'
                      sh 'docker-compose -f ${DOCKER_COMPOSE_FILE} down'
                      sh "docker network rm ${APP_NAME} || true"

                      cleanWs()
                      sh 'docker volume prune'
              }

            }
      }

